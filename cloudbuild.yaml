steps:
  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-image'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/cipher-intelligence:$BUILD_ID',
      '-t', 'gcr.io/$PROJECT_ID/cipher-intelligence:latest',
      '.'
    ]
    timeout: '600s'

  # Step 2: Push Docker images
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-build-id'
    args: ['push', 'gcr.io/$PROJECT_ID/cipher-intelligence:$BUILD_ID']
    waitFor: ['build-image']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-latest'
    args: ['push', 'gcr.io/$PROJECT_ID/cipher-intelligence:latest']
    waitFor: ['build-image']

  # Step 3: Enable APIs and fix permissions
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'enable-apis-and-permissions'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîß Enabling required APIs..."
        gcloud services enable \
          cloudbuild.googleapis.com \
          run.googleapis.com \
          bigquery.googleapis.com \
          secretmanager.googleapis.com \
          logging.googleapis.com \
          monitoring.googleapis.com \
          storage.googleapis.com \
          aiplatform.googleapis.com
        echo "‚úÖ APIs enabled successfully"
        
        echo "üîë Granting BigQuery permissions..."
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com" \
          --role="roles/bigquery.jobUser" \
          --quiet
        
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com" \
          --role="roles/bigquery.dataEditor" \
          --quiet
        
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com" \
          --role="roles/storage.objectAdmin" \
          --quiet
        
        echo "‚úÖ BigQuery and Storage permissions granted"
    waitFor: ['-']

  # Step 4: Verify secrets configuration
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'verify-secrets'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üîê Verifying CIPHER secrets configuration..."
        
        # Function to check secret
        check_secret() {
          local secret_name=$1
          if gcloud secrets describe $secret_name >/dev/null 2>&1; then
            local secret_value=$(gcloud secrets versions access latest --secret="$secret_name" 2>/dev/null || echo "")
            if [ -n "$secret_value" ] && [ "$secret_value" != "REPLACE_WITH_YOUR_API_ID" ] && [ "$secret_value" != "REPLACE_WITH_YOUR_API_HASH" ] && [ "$secret_value" != "REPLACE_WITH_YOUR_PHONE" ] && [ "$secret_value" != "REPLACE_WITH_YOUR_GEMINI_API_KEY" ]; then
              echo "‚úÖ Secret $secret_name is properly configured"
              echo "configured" > /workspace/${secret_name}_status.txt
            else
              echo "‚ö†Ô∏è  Secret $secret_name exists but needs updating"
              echo "needs_update" > /workspace/${secret_name}_status.txt
            fi
          else
            echo "‚ùå Secret $secret_name is missing"
            echo "missing" > /workspace/${secret_name}_status.txt
          fi
        }
        
        # Check all required secrets for CIPHER
        check_secret "telegram-api-id"
        check_secret "telegram-api-hash"
        check_secret "telegram-phone-number"
        check_secret "gemini-api-key"
        
        echo "üîê Secret verification completed"
    waitFor: ['enable-apis-and-permissions']

  # Step 5: Setup BigQuery for cybersecurity data
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'setup-bigquery'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üìä Setting up BigQuery for CIPHER cybersecurity intelligence..."
        
        # Create dataset if it doesn't exist
        if ! bq show --dataset $PROJECT_ID:telegram_data >/dev/null 2>&1; then
          bq mk --location=US \
            --description="CIPHER Cybersecurity Intelligence Platform - Threat Intelligence Data" \
            telegram_data
          echo "‚úÖ Created BigQuery dataset: telegram_data"
        else
          echo "‚úÖ BigQuery dataset already exists"
        fi
        
        echo "üìä BigQuery setup completed"
    waitFor: ['verify-secrets']

  # Step 6: Deploy CIPHER to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-cipher'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üöÄ Deploying CIPHER Cybersecurity Intelligence Platform..."
        
        gcloud run deploy telegram-ai-processor \
          --image gcr.io/$PROJECT_ID/cipher-intelligence:$BUILD_ID \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --port 8080 \
          --memory 4Gi \
          --cpu 2 \
          --min-instances 0 \
          --max-instances 10 \
          --concurrency 100 \
          --timeout 3600 \
          --startup-cpu-boost \
          --service-account cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com \
          --set-env-vars="GOOGLE_CLOUD_PROJECT=$PROJECT_ID,LOG_LEVEL=INFO,DATASET_ID=telegram_data,TABLE_ID=processed_messages,PORT=8080,ENVIRONMENT=production" \
          --execution-environment gen2 \
          --no-cpu-throttling \
          --quiet
        
        echo "‚úÖ CIPHER deployment completed"
    waitFor: ['push-build-id', 'push-latest', 'setup-bigquery']

  # Step 7: Test deployment and verify functionality
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'test-cipher-deployment'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üß™ Testing CIPHER deployment..."
        
        # Get the service URL
        SERVICE_URL=$$(gcloud run services describe telegram-ai-processor \
          --region=us-central1 \
          --format='value(status.url)')
        
        echo "üõ°Ô∏è  CIPHER deployed at: $$SERVICE_URL"
        
        # Wait for service to be ready
        echo "‚è≥ Waiting for CIPHER to initialize..."
        for i in {1..20}; do
          echo "Health check attempt $$i/20..."
          
          # Test liveness probe first
          if curl -f -s "$$SERVICE_URL/health/live" >/dev/null 2>&1; then
            echo "‚úÖ CIPHER liveness check passed"
            
            # Test main health endpoint
            if curl -f -s "$$SERVICE_URL/health" >/dev/null 2>&1; then
              echo "‚úÖ CIPHER main health check passed"
              break
            fi
          fi
          
          if [ $$i -eq 20 ]; then
            echo "‚ö†Ô∏è  Service not fully responding yet but continuing..."
            break
          fi
          
          sleep 15
        done
        
        # Test additional endpoints
        echo "üîç Testing CIPHER endpoints..."
        
        # Test status endpoint
        if curl -f -s "$$SERVICE_URL/status" >/dev/null 2>&1; then
          echo "‚úÖ CIPHER status endpoint responding"
        else
          echo "‚ö†Ô∏è  Status endpoint not responding yet"
        fi
        
        # Test API endpoints
        if curl -f -s "$$SERVICE_URL/api/stats" >/dev/null 2>&1; then
          echo "‚úÖ CIPHER API endpoints responding"
        else
          echo "‚ö†Ô∏è  API endpoints not responding yet"
        fi
        
        # Store service URL for summary
        echo "$$SERVICE_URL" > /workspace/service_url.txt
        
        echo "üß™ CIPHER testing completed"
    waitFor: ['deploy-cipher']

  # Step 8: Deployment summary and status
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deployment-summary'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_URL=$$(cat /workspace/service_url.txt)
        
        # Check secret status
        TELEGRAM_API_ID_STATUS=$$(cat /workspace/telegram-api-id_status.txt 2>/dev/null || echo "unknown")
        TELEGRAM_API_HASH_STATUS=$$(cat /workspace/telegram-api-hash_status.txt 2>/dev/null || echo "unknown")
        TELEGRAM_PHONE_STATUS=$$(cat /workspace/telegram-phone-number_status.txt 2>/dev/null || echo "unknown")
        GEMINI_KEY_STATUS=$$(cat /workspace/gemini-api-key_status.txt 2>/dev/null || echo "unknown")
        
        echo ""
        echo "üõ°Ô∏è  CIPHER DEPLOYMENT COMPLETE!"
        echo "========================================================================"
        echo "üéØ CIPHER Cybersecurity Intelligence Platform"
        echo "üìç Service URL: $$SERVICE_URL"
        echo "üîó Dashboard: $$SERVICE_URL"
        echo "üìä System Status: $$SERVICE_URL/status"
        echo "üè• Health Check: $$SERVICE_URL/health"
        echo "üì° API Endpoints: $$SERVICE_URL/api/stats"
        echo "========================================================================"
        echo ""
        
        # Check configuration status
        READY=true
        CONFIGURED_COUNT=0
        
        echo "üìã CIPHER CONFIGURATION STATUS:"
        echo "================================"
        
        if [ "$$TELEGRAM_API_ID_STATUS" = "configured" ]; then
          echo "‚úÖ Telegram API ID configured"
          CONFIGURED_COUNT=$$((CONFIGURED_COUNT + 1))
        else
          echo "‚ö†Ô∏è  Telegram API ID status: $$TELEGRAM_API_ID_STATUS"
          READY=false
        fi
        
        if [ "$$TELEGRAM_API_HASH_STATUS" = "configured" ]; then
          echo "‚úÖ Telegram API Hash configured"
          CONFIGURED_COUNT=$$((CONFIGURED_COUNT + 1))
        else
          echo "‚ö†Ô∏è  Telegram API Hash status: $$TELEGRAM_API_HASH_STATUS"
          READY=false
        fi
        
        if [ "$$TELEGRAM_PHONE_STATUS" = "configured" ]; then
          echo "‚úÖ Phone number configured"
          CONFIGURED_COUNT=$$((CONFIGURED_COUNT + 1))
        else
          echo "‚ö†Ô∏è  Phone number status: $$TELEGRAM_PHONE_STATUS"
          READY=false
        fi
        
        if [ "$$GEMINI_KEY_STATUS" = "configured" ]; then
          echo "‚úÖ Gemini AI configured"
          CONFIGURED_COUNT=$$((CONFIGURED_COUNT + 1))
        else
          echo "‚ö†Ô∏è  Gemini API key status: $$GEMINI_KEY_STATUS"
          READY=false
        fi
        
        echo ""
        echo "Configuration Status: $$CONFIGURED_COUNT/4 secrets properly configured"
        
        if [ "$$READY" = "true" ]; then
          echo ""
          echo "üéØ CIPHER SYSTEM FULLY OPERATIONAL!"
          echo "All secrets configured. Full cybersecurity monitoring active."
          echo ""
          echo "üîç CYBERSECURITY INTELLIGENCE SOURCES:"
          echo "   üî¥ @DarkfeedNews - Advanced Persistent Threats & Zero-days"
          echo "   üü† @breachdetector - Real-time Data Breach Monitoring"
          echo "   üîµ @secharvester - CVE Tracking & Security Advisories"
          echo ""
          echo "üõ°Ô∏è  CIPHER CAPABILITIES:"
          echo "   ‚Ä¢ Real-time threat intelligence monitoring"
          echo "   ‚Ä¢ APT campaign tracking and attribution"
          echo "   ‚Ä¢ Data breach detection and alerting"
          echo "   ‚Ä¢ CVE and vulnerability monitoring"
          echo "   ‚Ä¢ IOC extraction and correlation"
          echo "   ‚Ä¢ Malware family identification"
          echo "   ‚Ä¢ Threat actor attribution"
          echo "   ‚Ä¢ Geographic and industry targeting analysis"
          echo ""
          echo "üöÄ Access your CIPHER dashboard: $$SERVICE_URL"
        else
          echo ""
          echo "üîß CONFIGURATION ISSUES DETECTED"
          echo "Some secrets need attention. CIPHER will start but monitoring may be limited."
          echo "Please update secret values and redeploy for full functionality."
        fi
        
        echo ""
        echo "üîß CIPHER MANAGEMENT COMMANDS:"
        echo "   ‚Ä¢ View logs: gcloud logs read \"resource.type=cloud_run_revision AND resource.labels.service_name=telegram-ai-processor\" --limit=50"
        echo "   ‚Ä¢ Service status: gcloud run services describe telegram-ai-processor --region=us-central1"
        echo "   ‚Ä¢ System health: curl $$SERVICE_URL/health"
        echo "   ‚Ä¢ API status: curl $$SERVICE_URL/api/stats"
        echo "   ‚Ä¢ Threat analytics: curl $$SERVICE_URL/api/threat-analytics"
        echo "   ‚Ä¢ Check BigQuery: bq query --use_legacy_sql=false 'SELECT COUNT(*) FROM \\`$PROJECT_ID.telegram_data.processed_messages\\`'"
        echo ""
        echo "üõ°Ô∏è  CIPHER Cybersecurity Intelligence Platform is ready!"
        echo "Monitor threats, track APTs, and stay ahead of cybersecurity risks."
    waitFor: ['test-cipher-deployment']

# Service account configuration
serviceAccount: 'projects/$PROJECT_ID/serviceAccounts/cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com'

# Build options optimized for production
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  substitution_option: 'ALLOW_LOOSE'
  dynamic_substitutions: true

# Extended timeout for comprehensive deployment
timeout: '3000s'

# Build tags for organization
tags:
  - 'cipher-cybersecurity-platform'
  - 'threat-intelligence'
  - 'production'
  - 'cybersecurity-monitoring'

# Substitutions for flexibility
substitutions:
  _REGION: 'us-central1'
  _SERVICE_NAME: 'telegram-ai-processor'
  _DATASET_ID: 'telegram_data'
  _TABLE_ID: 'processed_messages'
