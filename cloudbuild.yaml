steps:
  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-image'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/telegram-ai-processor:$BUILD_ID',
      '-t', 'gcr.io/$PROJECT_ID/telegram-ai-processor:latest',
      '.'
    ]
    timeout: '600s'

  # Step 2: Push the Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-build-id'
    args: ['push', 'gcr.io/$PROJECT_ID/telegram-ai-processor:$BUILD_ID']
    waitFor: ['build-image']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-latest'
    args: ['push', 'gcr.io/$PROJECT_ID/telegram-ai-processor:latest']
    waitFor: ['build-image']

  # Step 3: Enable required APIs (idempotent)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'enable-apis'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Ensuring required APIs are enabled..."
        gcloud services enable \
          cloudbuild.googleapis.com \
          run.googleapis.com \
          bigquery.googleapis.com \
          secretmanager.googleapis.com \
          logging.googleapis.com \
          monitoring.googleapis.com
        echo "APIs enabled successfully"
    waitFor: ['-']

  # Step 4: Verify Telegram API credentials
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'verify-telegram-api'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Checking Telegram API credentials..."
        
        # Check API ID
        if gcloud secrets describe telegram-api-id >/dev/null 2>&1; then
          API_ID=$$(gcloud secrets versions access latest --secret="telegram-api-id" 2>/dev/null || echo "")
          if [ -z "$$API_ID" ] || [ "$$API_ID" = "REPLACE_WITH_YOUR_API_ID" ]; then
            echo "⚠️  WARNING: Telegram API ID is not set or is placeholder!"
            echo "   Please set your actual API ID: 29916660"
            echo "   echo -n '29916660' | gcloud secrets versions add telegram-api-id --data-file=-"
            echo "placeholder" > /workspace/api_id_status.txt
          else
            echo "Telegram API ID is configured ✓"
            echo "configured" > /workspace/api_id_status.txt
          fi
        else
          echo "⚠️  WARNING: Telegram API ID secret does not exist!"
          echo "   Creating placeholder secret. Please update with your actual API ID:"
          echo "   echo -n '29916660' | gcloud secrets create telegram-api-id --data-file=-"
          
          echo -n "REPLACE_WITH_YOUR_API_ID" | gcloud secrets create telegram-api-id --data-file=-
          
          # Grant service account access
          gcloud secrets add-iam-policy-binding telegram-api-id \
            --member="serviceAccount:cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com" \
            --role="roles/secretmanager.secretAccessor"
          
          echo "placeholder" > /workspace/api_id_status.txt
        fi
        
        # Check API Hash
        if gcloud secrets describe telegram-api-hash >/dev/null 2>&1; then
          API_HASH=$$(gcloud secrets versions access latest --secret="telegram-api-hash" 2>/dev/null || echo "")
          if [ -z "$$API_HASH" ] || [ "$$API_HASH" = "REPLACE_WITH_YOUR_API_HASH" ]; then
            echo "⚠️  WARNING: Telegram API Hash is not set or is placeholder!"
            echo "   Please set your actual API Hash from your Telegram app"
            echo "   echo -n 'YOUR_API_HASH' | gcloud secrets versions add telegram-api-hash --data-file=-"
            echo "placeholder" > /workspace/api_hash_status.txt
          else
            echo "Telegram API Hash is configured ✓"
            echo "configured" > /workspace/api_hash_status.txt
          fi
        else
          echo "⚠️  WARNING: Telegram API Hash secret does not exist!"
          echo "   Creating placeholder secret. Please update with your actual API Hash:"
          echo "   echo -n 'YOUR_API_HASH' | gcloud secrets create telegram-api-hash --data-file=-"
          
          echo -n "REPLACE_WITH_YOUR_API_HASH" | gcloud secrets create telegram-api-hash --data-file=-
          
          # Grant service account access
          gcloud secrets add-iam-policy-binding telegram-api-hash \
            --member="serviceAccount:cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com" \
            --role="roles/secretmanager.secretAccessor"
          
          echo "placeholder" > /workspace/api_hash_status.txt
        fi
        
        # Check Phone Number
        if gcloud secrets describe telegram-phone-number >/dev/null 2>&1; then
          PHONE=$$(gcloud secrets versions access latest --secret="telegram-phone-number" 2>/dev/null || echo "")
          if [ -z "$$PHONE" ] || [ "$$PHONE" = "REPLACE_WITH_YOUR_PHONE" ]; then
            echo "⚠️  WARNING: Telegram phone number is not set or is placeholder!"
            echo "   Please set your actual phone number (international format):"
            echo "   echo -n '+1234567890' | gcloud secrets versions add telegram-phone-number --data-file=-"
            echo "placeholder" > /workspace/phone_status.txt
          else
            echo "Telegram phone number is configured ✓"
            echo "configured" > /workspace/phone_status.txt
          fi
        else
          echo "⚠️  WARNING: Telegram phone number secret does not exist!"
          echo "   Creating placeholder secret. Please update with your actual phone number:"
          echo "   echo -n '+1234567890' | gcloud secrets create telegram-phone-number --data-file=-"
          
          echo -n "REPLACE_WITH_YOUR_PHONE" | gcloud secrets create telegram-phone-number --data-file=-
          
          # Grant service account access
          gcloud secrets add-iam-policy-binding telegram-phone-number \
            --member="serviceAccount:cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com" \
            --role="roles/secretmanager.secretAccessor"
          
          echo "placeholder" > /workspace/phone_status.txt
        fi
    waitFor: ['enable-apis']

  # Step 5: Verify Gemini API key exists
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'verify-gemini-key'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Checking Gemini API key..."
        
        if gcloud secrets describe gemini-api-key >/dev/null 2>&1; then
          GEMINI_KEY=$$(gcloud secrets versions access latest --secret="gemini-api-key" 2>/dev/null || echo "")
          
          if [ -z "$$GEMINI_KEY" ] || [ "$$GEMINI_KEY" = "REPLACE_WITH_YOUR_GEMINI_API_KEY" ]; then
            echo "⚠️  WARNING: Gemini API key is not set or is placeholder!"
            echo "   Please set your actual Gemini API key from https://aistudio.google.com/"
            echo "   echo -n 'YOUR_GEMINI_API_KEY' | gcloud secrets versions add gemini-api-key --data-file=-"
            echo "placeholder" > /workspace/gemini_key_status.txt
          else
            echo "Gemini API key is configured ✓"
            echo "configured" > /workspace/gemini_key_status.txt
          fi
        else
          echo "⚠️  WARNING: Gemini API key secret does not exist!"
          echo "   Creating placeholder secret. Please update with your actual API key:"
          echo "   Get your key from: https://aistudio.google.com/"
          echo "   echo -n 'YOUR_GEMINI_API_KEY' | gcloud secrets create gemini-api-key --data-file=-"
          
          echo -n "REPLACE_WITH_YOUR_GEMINI_API_KEY" | gcloud secrets create gemini-api-key --data-file=-
          
          # Grant service account access
          gcloud secrets add-iam-policy-binding gemini-api-key \
            --member="serviceAccount:cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com" \
            --role="roles/secretmanager.secretAccessor"
          
          echo "placeholder" > /workspace/gemini_key_status.txt
        fi
    waitFor: ['verify-telegram-api']

  # Step 6: Create BigQuery dataset (idempotent)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'setup-bigquery'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Setting up BigQuery dataset..."
        
        # Create dataset if it doesn't exist
        if ! bq show --dataset $PROJECT_ID:telegram_data >/dev/null 2>&1; then
          bq mk --location=US --description="Telegram AI Processor data" telegram_data
          echo "Created BigQuery dataset: telegram_data"
        else
          echo "BigQuery dataset already exists ✓"
        fi
    waitFor: ['verify-gemini-key']

  # Step 7: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-service'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Deploying to Cloud Run..."
        
        gcloud run deploy telegram-ai-processor \
          --image gcr.io/$PROJECT_ID/telegram-ai-processor:$BUILD_ID \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --port 8080 \
          --memory 2Gi \
          --cpu 2 \
          --min-instances 1 \
          --max-instances 10 \
          --concurrency 80 \
          --timeout 3600 \
          --service-account cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com \
          --set-env-vars="GOOGLE_CLOUD_PROJECT=$PROJECT_ID,LOG_LEVEL=INFO,DATASET_ID=telegram_data,TABLE_ID=processed_messages" \
          --quiet
        
        echo "Cloud Run deployment completed ✓"
    waitFor: ['push-build-id', 'push-latest', 'setup-bigquery']

  # Step 8: Get service URL and test
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'test-service'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Testing deployed service..."
        
        # Get the actual service URL
        SERVICE_URL=$$(gcloud run services describe telegram-ai-processor \
          --region=us-central1 \
          --format='value(status.url)')
        
        echo "Service deployed at: $$SERVICE_URL"
        
        # Test health endpoint
        echo "Testing service health..."
        sleep 15  # Give service time to start
        
        if curl -f "$$SERVICE_URL/health" >/dev/null 2>&1; then
          echo "Health check passed ✓"
        else
          echo "⚠️  Health check failed - service may still be starting"
          echo "Trying again in 10 seconds..."
          sleep 10
          if curl -f "$$SERVICE_URL/health" >/dev/null 2>&1; then
            echo "Health check passed on retry ✓"
          else
            echo "❌ Health check still failing - check service logs"
          fi
        fi
        
        # Store service URL for next step
        echo "$$SERVICE_URL" > /workspace/service_url.txt
        
        echo "Service testing completed ✓"
    waitFor: ['deploy-service']

  # Step 9: Final status and instructions
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deployment-summary'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_URL=$$(cat /workspace/service_url.txt)
        API_ID_STATUS=$$(cat /workspace/api_id_status.txt)
        API_HASH_STATUS=$$(cat /workspace/api_hash_status.txt)
        PHONE_STATUS=$$(cat /workspace/phone_status.txt)
        GEMINI_KEY_STATUS=$$(cat /workspace/gemini_key_status.txt)
        
        echo ""
        echo "🎉 DEPLOYMENT COMPLETE!"
        echo "=================================="
        echo "📍 Service URL: $$SERVICE_URL"
        echo "🔗 Dashboard: $$SERVICE_URL"
        echo "📊 Monitoring Status: $$SERVICE_URL/monitoring/status"
        echo "🏥 Health Check: $$SERVICE_URL/health"
        echo "=================================="
        echo ""
        
        # Check configuration status
        READY=true
        
        if [ "$$API_ID_STATUS" = "configured" ]; then
          echo "✅ Telegram API ID configured"
        else
          echo "⚠️  Telegram API ID needs to be configured:"
          echo "   echo -n '29916660' | gcloud secrets versions add telegram-api-id --data-file=-"
          READY=false
        fi
        
        if [ "$$API_HASH_STATUS" = "configured" ]; then
          echo "✅ Telegram API Hash configured"
        else
          echo "⚠️  Telegram API Hash needs to be configured:"
          echo "   echo -n '25fce6daeea191ec384eafe222ae0655' | gcloud secrets versions add telegram-api-hash --data-file=-"
          READY=false
        fi
        
        if [ "$$PHONE_STATUS" = "configured" ]; then
          echo "✅ Phone number configured"
        else
          echo "⚠️  Phone number needs to be configured:"
          echo "   echo -n '+YOUR_PHONE_NUMBER' | gcloud secrets versions add telegram-phone-number --data-file=-"
          READY=false
        fi
        
        if [ "$$GEMINI_KEY_STATUS" = "configured" ]; then
          echo "✅ Gemini API key configured"
        else
          echo "⚠️  Gemini API key needs to be configured:"
          echo "   1. Get your API key from: https://aistudio.google.com/"
          echo "   2. Run: echo -n 'YOUR_GEMINI_API_KEY' | gcloud secrets versions add gemini-api-key --data-file=-"
          READY=false
        fi
        
        if [ "$$READY" = "true" ]; then
          echo ""
          echo "🎯 System is fully configured! Monitoring will start automatically."
          echo "📡 Monitored channels: @bbcbreaking, @cnn, @bitcoin, @ethereum, @techcrunch, @reuters"
        else
          echo ""
          echo "🔧 Complete the configuration above, then redeploy:"
          echo "   gcloud builds submit --config cloudbuild.yaml ."
        fi
        
        echo ""
        echo "🔧 Useful commands:"
        echo "   • View logs: gcloud logs read \"resource.type=cloud_run_revision AND resource.labels.service_name=telegram-ai-processor\" --limit=20"
        echo "   • Check service: gcloud run services describe telegram-ai-processor --region=us-central1"
        echo "   • Update API ID: echo -n '29916660' | gcloud secrets versions add telegram-api-id --data-file=-"
        echo "   • Update API Hash: echo -n 'YOUR_HASH' | gcloud secrets versions add telegram-api-hash --data-file=-"
        echo "   • Update phone: echo -n '+YOUR_PHONE' | gcloud secrets versions add telegram-phone-number --data-file=-"
        echo "   • Update Gemini key: echo -n 'YOUR_KEY' | gcloud secrets versions add gemini-api-key --data-file=-"
        echo "   • View BigQuery data: bq query --use_legacy_sql=false 'SELECT COUNT(*) FROM \`$PROJECT_ID.telegram_data.processed_messages\`'"
        echo ""
        echo "✨ Your Telegram Channel Monitor is ready!"
    waitFor: ['test-service']

# Service account configuration
serviceAccount: 'projects/$PROJECT_ID/serviceAccounts/cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  substitution_option: 'ALLOW_LOOSE'
  dynamic_substitutions: true

# Increase timeout for comprehensive deployment
timeout: '1800s'

# Build tags for organization
tags:
  - 'telegram-ai-processor'
  - 'cloud-run'
  - 'production'
  - 'mtproto-monitoring'

# Substitutions
substitutions:
  _REGION: 'us-central1'
  _SERVICE_NAME: 'telegram-ai-processor'
  _DATASET_ID: 'telegram_data'
  _TABLE_ID: 'processed_messages'
