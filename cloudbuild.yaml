steps:
  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-image'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/telegram-ai-processor:$BUILD_ID',
      '-t', 'gcr.io/$PROJECT_ID/telegram-ai-processor:latest',
      '.'
    ]
    timeout: '600s'

  # Step 2: Push the Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-build-id'
    args: ['push', 'gcr.io/$PROJECT_ID/telegram-ai-processor:$BUILD_ID']
    waitFor: ['build-image']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-latest'
    args: ['push', 'gcr.io/$PROJECT_ID/telegram-ai-processor:latest']
    waitFor: ['build-image']

  # Step 3: Enable required APIs (idempotent)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'enable-apis'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Ensuring required APIs are enabled..."
        gcloud services enable \
          cloudbuild.googleapis.com \
          run.googleapis.com \
          bigquery.googleapis.com \
          secretmanager.googleapis.com \
          logging.googleapis.com \
          monitoring.googleapis.com \
          aiplatform.googleapis.com
        echo "APIs enabled successfully"
    waitFor: ['-']

  # Step 4: Create the correct service account if needed
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'setup-service-account'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Setting up service account for CIPHER..."
        
        # Create service account if it doesn't exist
        if ! gcloud iam service-accounts describe cipher-service@$PROJECT_ID.iam.gserviceaccount.com >/dev/null 2>&1; then
          gcloud iam service-accounts create cipher-service \
            --display-name="CIPHER Cybersecurity Service Account" \
            --description="Service account for CIPHER cybersecurity intelligence platform"
          echo "Created CIPHER service account"
        else
          echo "CIPHER service account already exists"
        fi
        
        # Grant necessary roles
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:cipher-service@$PROJECT_ID.iam.gserviceaccount.com" \
          --role="roles/bigquery.dataEditor"
        
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:cipher-service@$PROJECT_ID.iam.gserviceaccount.com" \
          --role="roles/bigquery.jobUser"
        
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:cipher-service@$PROJECT_ID.iam.gserviceaccount.com" \
          --role="roles/secretmanager.secretAccessor"
        
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:cipher-service@$PROJECT_ID.iam.gserviceaccount.com" \
          --role="roles/storage.objectAdmin"
        
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:cipher-service@$PROJECT_ID.iam.gserviceaccount.com" \
          --role="roles/logging.logWriter"
        
        echo "Service account permissions configured"
    waitFor: ['enable-apis']

  # Step 5: Verify existing secrets have values
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'verify-secrets'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Checking existing secrets..."
        
        # Function to check secret
        check_secret() {
          local secret_name=$1
          if gcloud secrets describe $secret_name >/dev/null 2>&1; then
            local secret_value=$(gcloud secrets versions access latest --secret="$secret_name" 2>/dev/null || echo "")
            if [ -n "$secret_value" ] && [ "$secret_value" != "REPLACE_WITH_YOUR_API_ID" ] && [ "$secret_value" != "REPLACE_WITH_YOUR_API_HASH" ] && [ "$secret_value" != "REPLACE_WITH_YOUR_PHONE" ] && [ "$secret_value" != "REPLACE_WITH_YOUR_GEMINI_API_KEY" ]; then
              echo "‚úÖ Secret $secret_name is configured with real value"
              echo "configured" > /workspace/${secret_name}_status.txt
            else
              echo "‚ö†Ô∏è  Secret $secret_name exists but may need updating"
              echo "needs_update" > /workspace/${secret_name}_status.txt
            fi
          else
            echo "‚ùå Secret $secret_name does not exist"
            echo "missing" > /workspace/${secret_name}_status.txt
          fi
        }
        
        # Check all required secrets
        check_secret "telegram-api-id"
        check_secret "telegram-api-hash" 
        check_secret "telegram-phone-number"
        check_secret "gemini-api-key"
        
        echo "Secret verification completed"
    waitFor: ['setup-service-account']

  # Step 6: Create BigQuery dataset (idempotent)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'setup-bigquery'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Setting up BigQuery dataset..."
        
        # Create dataset if it doesn't exist
        if ! bq show --dataset $PROJECT_ID:telegram_data >/dev/null 2>&1; then
          bq mk --location=US --description="CIPHER Cybersecurity Intelligence data" telegram_data
          echo "Created BigQuery dataset: telegram_data"
        else
          echo "BigQuery dataset already exists ‚úì"
        fi
        
        echo "BigQuery setup completed"
    waitFor: ['verify-secrets']

  # Step 7: Deploy to Cloud Run with proper service account
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-service'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Deploying CIPHER to Cloud Run..."
        
        gcloud run deploy telegram-ai-processor \
          --image gcr.io/$PROJECT_ID/telegram-ai-processor:$BUILD_ID \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --port 8080 \
          --memory 4Gi \
          --cpu 2 \
          --min-instances 0 \
          --max-instances 10 \
          --concurrency 80 \
          --timeout 3600 \
          --service-account cipher-service@$PROJECT_ID.iam.gserviceaccount.com \
          --set-env-vars="GOOGLE_CLOUD_PROJECT=$PROJECT_ID,LOG_LEVEL=INFO,DATASET_ID=telegram_data,TABLE_ID=processed_messages" \
          --no-cpu-throttling \
          --execution-environment gen2 \
          --quiet
        
        echo "CIPHER Cloud Run deployment completed ‚úì"
    waitFor: ['push-build-id', 'push-latest', 'setup-bigquery']

  # Step 8: Get service URL and test
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'test-service'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Testing CIPHER service..."
        
        # Get the actual service URL
        SERVICE_URL=$$(gcloud run services describe telegram-ai-processor \
          --region=us-central1 \
          --format='value(status.url)')
        
        echo "CIPHER service deployed at: $$SERVICE_URL"
        
        # Test health endpoint with extended timeout
        echo "Testing service health (allowing 3 minutes for startup)..."
        for i in {1..12}; do
          echo "Health check attempt $$i/12..."
          if curl -f -m 10 "$$SERVICE_URL/health" >/dev/null 2>&1; then
            echo "‚úÖ CIPHER health check passed!"
            break
          else
            echo "‚ö†Ô∏è  Health check failed, waiting 15 seconds... (attempt $$i/12)"
            if [ $$i -eq 12 ]; then
              echo "‚ùå Health check still failing after 3 minutes"
              echo "CIPHER may still be initializing. Check logs for details."
            else
              sleep 15
            fi
          fi
        done
        
        # Store service URL for next step
        echo "$$SERVICE_URL" > /workspace/service_url.txt
        
        echo "Service testing completed ‚úì"
    waitFor: ['deploy-service']

  # Step 9: Final status and instructions
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deployment-summary'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_URL=$$(cat /workspace/service_url.txt)
        
        # Check secret status
        TELEGRAM_API_ID_STATUS=$$(cat /workspace/telegram-api-id_status.txt 2>/dev/null || echo "unknown")
        TELEGRAM_API_HASH_STATUS=$$(cat /workspace/telegram-api-hash_status.txt 2>/dev/null || echo "unknown")
        TELEGRAM_PHONE_STATUS=$$(cat /workspace/telegram-phone-number_status.txt 2>/dev/null || echo "unknown")
        GEMINI_KEY_STATUS=$$(cat /workspace/gemini-api-key_status.txt 2>/dev/null || echo "unknown")
        
        echo ""
        echo "üõ°Ô∏è  CIPHER DEPLOYMENT COMPLETE!"
        echo "=================================="
        echo "üìç Service URL: $$SERVICE_URL"
        echo "üîó Dashboard: $$SERVICE_URL"
        echo "üìä Monitoring Status: $$SERVICE_URL/monitoring/status"
        echo "üè• Health Check: $$SERVICE_URL/health"
        echo "=================================="
        echo ""
        
        # Check configuration status
        READY=true
        CONFIGURED_COUNT=0
        
        echo "üìã CONFIGURATION STATUS:"
        echo "========================"
        
        if [ "$$TELEGRAM_API_ID_STATUS" = "configured" ]; then
          echo "‚úÖ Telegram API ID configured"
          CONFIGURED_COUNT=$$((CONFIGURED_COUNT + 1))
        else
          echo "‚ö†Ô∏è  Telegram API ID status: $$TELEGRAM_API_ID_STATUS"
          READY=false
        fi
        
        if [ "$$TELEGRAM_API_HASH_STATUS" = "configured" ]; then
          echo "‚úÖ Telegram API Hash configured"
          CONFIGURED_COUNT=$$((CONFIGURED_COUNT + 1))
        else
          echo "‚ö†Ô∏è  Telegram API Hash status: $$TELEGRAM_API_HASH_STATUS"
          READY=false
        fi
        
        if [ "$$TELEGRAM_PHONE_STATUS" = "configured" ]; then
          echo "‚úÖ Phone number configured"
          CONFIGURED_COUNT=$$((CONFIGURED_COUNT + 1))
        else
          echo "‚ö†Ô∏è  Phone number status: $$TELEGRAM_PHONE_STATUS"
          READY=false
        fi
        
        if [ "$$GEMINI_KEY_STATUS" = "configured" ]; then
          echo "‚úÖ Gemini API key configured"
          CONFIGURED_COUNT=$$((CONFIGURED_COUNT + 1))
        else
          echo "‚ö†Ô∏è  Gemini API key status: $$GEMINI_KEY_STATUS"
          READY=false
        fi
        
        echo ""
        echo "Configuration: $$CONFIGURED_COUNT/4 secrets properly configured"
        
        if [ "$$READY" = "true" ]; then
          echo ""
          echo "üéØ CIPHER SYSTEM IS READY!"
          echo "All secrets are configured. Cybersecurity monitoring will start automatically."
          echo "üì° Monitored channels: @DarkfeedNews, @breachdetector, @secharvester"
          echo ""
          echo "Visit $$SERVICE_URL to see the cybersecurity dashboard"
        else
          echo ""
          echo "üîß CONFIGURATION ISSUES DETECTED"
          echo "Some secrets may need attention. Check the logs and secret values."
          echo "The service will still start but monitoring may not be fully functional."
        fi
        
        echo ""
        echo "üîß Useful commands:"
        echo "   ‚Ä¢ View logs: gcloud logs read \"resource.type=cloud_run_revision AND resource.labels.service_name=telegram-ai-processor\" --limit=20"
        echo "   ‚Ä¢ Check service: gcloud run services describe telegram-ai-processor --region=us-central1"
        echo "   ‚Ä¢ View BigQuery data: bq query --use_legacy_sql=false 'SELECT COUNT(*) FROM \`$PROJECT_ID.telegram_data.processed_messages\`'"
        echo "   ‚Ä¢ Check secrets: gcloud secrets list"
        echo ""
        echo "‚ú® Your CIPHER Cybersecurity Intelligence Platform is deployed!"
    waitFor: ['test-service']

# Service account configuration - using dedicated CIPHER service account
serviceAccount: 'projects/$PROJECT_ID/serviceAccounts/cipher-service@$PROJECT_ID.iam.gserviceaccount.com'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  substitution_option: 'ALLOW_LOOSE'
  dynamic_substitutions: true

# Increase timeout for comprehensive deployment
timeout: '2400s'

# Build tags for organization
tags:
  - 'cipher'
  - 'cybersecurity'
  - 'cloud-run'
  - 'production'
  - 'mtproto-monitoring'

# Substitutions
substitutions:
  _REGION: 'us-central1'
  _SERVICE_NAME: 'telegram-ai-processor'
  _DATASET_ID: 'telegram_data'
  _TABLE_ID: 'processed_messages'
