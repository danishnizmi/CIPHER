steps:
  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-image'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/telegram-ai-processor:$BUILD_ID',
      '-t', 'gcr.io/$PROJECT_ID/telegram-ai-processor:latest',
      '.'
    ]
    timeout: '600s'

  # Step 2: Push the Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-build-id'
    args: ['push', 'gcr.io/$PROJECT_ID/telegram-ai-processor:$BUILD_ID']
    waitFor: ['build-image']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-latest'
    args: ['push', 'gcr.io/$PROJECT_ID/telegram-ai-processor:latest']
    waitFor: ['build-image']

  # Step 3: Enable required APIs (idempotent)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'enable-apis'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Ensuring required APIs are enabled..."
        gcloud services enable \
          cloudbuild.googleapis.com \
          run.googleapis.com \
          bigquery.googleapis.com \
          secretmanager.googleapis.com \
          logging.googleapis.com \
          monitoring.googleapis.com
        echo "APIs enabled successfully"
    waitFor: ['-']

  # Step 4: Verify existing secrets have values
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'verify-secrets'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Checking existing secrets..."
        
        # Function to check secret
        check_secret() {
          local secret_name=$1
          if gcloud secrets describe $secret_name >/dev/null 2>&1; then
            local secret_value=$(gcloud secrets versions access latest --secret="$secret_name" 2>/dev/null || echo "")
            if [ -n "$secret_value" ] && [ "$secret_value" != "REPLACE_WITH_YOUR_API_ID" ] && [ "$secret_value" != "REPLACE_WITH_YOUR_API_HASH" ] && [ "$secret_value" != "REPLACE_WITH_YOUR_PHONE" ] && [ "$secret_value" != "REPLACE_WITH_YOUR_GEMINI_API_KEY" ]; then
              echo "‚úÖ Secret $secret_name is configured with real value"
              echo "configured" > /workspace/${secret_name}_status.txt
            else
              echo "‚ö†Ô∏è  Secret $secret_name exists but may need updating"
              echo "needs_update" > /workspace/${secret_name}_status.txt
            fi
          else
            echo "‚ùå Secret $secret_name does not exist"
            echo "missing" > /workspace/${secret_name}_status.txt
          fi
        }
        
        # Check all required secrets
        check_secret "telegram-api-id"
        check_secret "telegram-api-hash"
        check_secret "telegram-phone-number"
        check_secret "gemini-api-key"
        
        echo "Secret verification completed"
    waitFor: ['enable-apis']

  # Step 5: Create BigQuery dataset (idempotent)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'setup-bigquery'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Setting up BigQuery dataset..."
        
        # Create dataset if it doesn't exist
        if ! bq show --dataset $PROJECT_ID:telegram_data >/dev/null 2>&1; then
          bq mk --location=US --description="Telegram AI Processor data" telegram_data
          echo "Created BigQuery dataset: telegram_data"
        else
          echo "BigQuery dataset already exists ‚úì"
        fi
        
        # Check if table needs to be recreated (due to schema issues)
        if bq show --schema $PROJECT_ID:telegram_data.processed_messages >/dev/null 2>&1; then
          echo "Table exists, checking schema..."
          # If we had schema issues, we might want to recreate
          echo "Table schema will be validated at runtime"
        else
          echo "Table will be created by application"
        fi
    waitFor: ['verify-secrets']

  # Step 6: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-service'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Deploying to Cloud Run..."
        
        gcloud run deploy telegram-ai-processor \
          --image gcr.io/$PROJECT_ID/telegram-ai-processor:$BUILD_ID \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --port 8080 \
          --memory 2Gi \
          --cpu 2 \
          --min-instances 1 \
          --max-instances 10 \
          --concurrency 80 \
          --timeout 3600 \
          --service-account cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com \
          --set-env-vars="GOOGLE_CLOUD_PROJECT=$PROJECT_ID,LOG_LEVEL=INFO,DATASET_ID=telegram_data,TABLE_ID=processed_messages" \
          --quiet
        
        echo "Cloud Run deployment completed ‚úì"
    waitFor: ['push-build-id', 'push-latest', 'setup-bigquery']

  # Step 7: Get service URL and test
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'test-service'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Testing deployed service..."
        
        # Get the actual service URL
        SERVICE_URL=$$(gcloud run services describe telegram-ai-processor \
          --region=us-central1 \
          --format='value(status.url)')
        
        echo "Service deployed at: $$SERVICE_URL"
        
        # Test health endpoint
        echo "Testing service health..."
        sleep 15  # Give service time to start
        
        if curl -f "$$SERVICE_URL/health" >/dev/null 2>&1; then
          echo "Health check passed ‚úì"
        else
          echo "‚ö†Ô∏è  Health check failed - service may still be starting"
          echo "Trying again in 10 seconds..."
          sleep 10
          if curl -f "$$SERVICE_URL/health" >/dev/null 2>&1; then
            echo "Health check passed on retry ‚úì"
          else
            echo "‚ùå Health check still failing - check service logs"
          fi
        fi
        
        # Store service URL for next step
        echo "$$SERVICE_URL" > /workspace/service_url.txt
        
        echo "Service testing completed ‚úì"
    waitFor: ['deploy-service']

  # Step 8: Final status and instructions
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deployment-summary'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_URL=$$(cat /workspace/service_url.txt)
        
        # Check secret status
        TELEGRAM_API_ID_STATUS=$$(cat /workspace/telegram-api-id_status.txt 2>/dev/null || echo "unknown")
        TELEGRAM_API_HASH_STATUS=$$(cat /workspace/telegram-api-hash_status.txt 2>/dev/null || echo "unknown")
        TELEGRAM_PHONE_STATUS=$$(cat /workspace/telegram-phone-number_status.txt 2>/dev/null || echo "unknown")
        GEMINI_KEY_STATUS=$$(cat /workspace/gemini-api-key_status.txt 2>/dev/null || echo "unknown")
        
        echo ""
        echo "üéâ DEPLOYMENT COMPLETE!"
        echo "=================================="
        echo "üìç Service URL: $$SERVICE_URL"
        echo "üîó Dashboard: $$SERVICE_URL"
        echo "üìä Monitoring Status: $$SERVICE_URL/monitoring/status"
        echo "üè• Health Check: $$SERVICE_URL/health"
        echo "=================================="
        echo ""
        
        # Check configuration status
        READY=true
        CONFIGURED_COUNT=0
        
        echo "üìã CONFIGURATION STATUS:"
        echo "========================"
        
        if [ "$$TELEGRAM_API_ID_STATUS" = "configured" ]; then
          echo "‚úÖ Telegram API ID configured"
          CONFIGURED_COUNT=$$((CONFIGURED_COUNT + 1))
        else
          echo "‚ö†Ô∏è  Telegram API ID status: $$TELEGRAM_API_ID_STATUS"
          READY=false
        fi
        
        if [ "$$TELEGRAM_API_HASH_STATUS" = "configured" ]; then
          echo "‚úÖ Telegram API Hash configured"
          CONFIGURED_COUNT=$$((CONFIGURED_COUNT + 1))
        else
          echo "‚ö†Ô∏è  Telegram API Hash status: $$TELEGRAM_API_HASH_STATUS"
          READY=false
        fi
        
        if [ "$$TELEGRAM_PHONE_STATUS" = "configured" ]; then
          echo "‚úÖ Phone number configured"
          CONFIGURED_COUNT=$$((CONFIGURED_COUNT + 1))
        else
          echo "‚ö†Ô∏è  Phone number status: $$TELEGRAM_PHONE_STATUS"
          READY=false
        fi
        
        if [ "$$GEMINI_KEY_STATUS" = "configured" ]; then
          echo "‚úÖ Gemini API key configured"
          CONFIGURED_COUNT=$$((CONFIGURED_COUNT + 1))
        else
          echo "‚ö†Ô∏è  Gemini API key status: $$GEMINI_KEY_STATUS"
          READY=false
        fi
        
        echo ""
        echo "Configuration: $$CONFIGURED_COUNT/4 secrets properly configured"
        
        if [ "$$READY" = "true" ]; then
          echo ""
          echo "üéØ SYSTEM IS READY!"
          echo "All secrets are configured. Monitoring will start automatically."
          echo "üì° Monitored channels: @bbcbreaking, @cnn, @bitcoin, @ethereum, @techcrunch, @reuters"
          echo ""
          echo "Visit $$SERVICE_URL to see the dashboard"
        else
          echo ""
          echo "üîß CONFIGURATION ISSUES DETECTED"
          echo "Some secrets may need attention. Check the logs and secret values."
          echo "The service will still start but monitoring may not be fully functional."
        fi
        
        echo ""
        echo "üîß Useful commands:"
        echo "   ‚Ä¢ View logs: gcloud logs read \"resource.type=cloud_run_revision AND resource.labels.service_name=telegram-ai-processor\" --limit=20"
        echo "   ‚Ä¢ Check service: gcloud run services describe telegram-ai-processor --region=us-central1"
        echo "   ‚Ä¢ View BigQuery data: bq query --use_legacy_sql=false 'SELECT COUNT(*) FROM \`$PROJECT_ID.telegram_data.processed_messages\`'"
        echo "   ‚Ä¢ Check secrets: gcloud secrets list"
        echo ""
        echo "‚ú® Your Telegram Channel Monitor is deployed!"
    waitFor: ['test-service']

# Service account configuration
serviceAccount: 'projects/$PROJECT_ID/serviceAccounts/cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  substitution_option: 'ALLOW_LOOSE'
  dynamic_substitutions: true

# Increase timeout for comprehensive deployment
timeout: '1800s'

# Build tags for organization
tags:
  - 'telegram-ai-processor'
  - 'cloud-run'
  - 'production'
  - 'mtproto-monitoring'

# Substitutions
substitutions:
  _REGION: 'us-central1'
  _SERVICE_NAME: 'telegram-ai-processor'
  _DATASET_ID: 'telegram_data'
  _TABLE_ID: 'processed_messages'
