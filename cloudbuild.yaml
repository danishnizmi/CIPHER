# CIPHER Platform - Cloud Build Configuration
# Fixed invalid substitution error and using cloud-build-service account

steps:
  # Step 1: Build the container image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/telegram-ai-processor:$BUILD_ID',
      '-t', 'gcr.io/$PROJECT_ID/telegram-ai-processor:latest',
      '.'
    ]
    id: 'build-image'

  # Step 2: Push the container image with build ID
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'push', 
      'gcr.io/$PROJECT_ID/telegram-ai-processor:$BUILD_ID'
    ]
    id: 'push-image'
    waitFor: ['build-image']

  # Step 3: Push latest tag
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'push', 
      'gcr.io/$PROJECT_ID/telegram-ai-processor:latest'
    ]
    id: 'push-latest'
    waitFor: ['build-image']

  # Step 4: Setup BigQuery dataset (cloud-build-service already has permissions)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Setting up BigQuery dataset..."
        
        # Enable APIs if not already enabled
        gcloud services enable bigquery.googleapis.com run.googleapis.com --quiet
        
        # Create BigQuery dataset if it doesn't exist
        bq ls --project_id=$PROJECT_ID telegram_data 2>/dev/null || \
        bq mk --dataset --location=US --description="CIPHER Intelligence Data" $PROJECT_ID:telegram_data
        
        # Verify dataset exists
        bq ls --project_id=$PROJECT_ID telegram_data
        
        echo "BigQuery setup completed successfully"
    id: 'setup-bigquery'

  # Step 5: Deploy to Cloud Run using cloud-build-service account
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args: [
      'run', 'deploy', 'telegram-ai-processor',
      '--image', 'gcr.io/$PROJECT_ID/telegram-ai-processor:$BUILD_ID',
      '--region', 'us-central1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--service-account', 'cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com',
      '--memory', '4Gi',
      '--cpu', '2',
      '--timeout', '3600',
      '--max-instances', '10',
      '--min-instances', '0',
      '--port', '8080',
      '--concurrency', '80',
      '--set-env-vars', 'GOOGLE_CLOUD_PROJECT=$PROJECT_ID,LOG_LEVEL=INFO,DATASET_ID=telegram_data,TABLE_ID=processed_messages,PORT=8080,PYTHONUNBUFFERED=1,SERVICE_ACCOUNT=cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com'
    ]
    id: 'deploy-cloud-run'
    waitFor: ['push-image', 'setup-bigquery']

  # Step 6: Get service URL and perform health checks
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Getting service URL and performing health checks..."
        
        # Get service URL
        SERVICE_URL=$(gcloud run services describe telegram-ai-processor \
          --region=us-central1 \
          --project=$PROJECT_ID \
          --format='value(status.url)')
        
        echo "‚úÖ Service URL: $SERVICE_URL"
        
        # Wait for service to be ready
        echo "Waiting for service to be ready..."
        sleep 45
        
        # Test health endpoints
        echo "Testing liveness endpoint..."
        if curl -f -s --max-time 30 "$SERVICE_URL/health/live"; then
          echo "‚úÖ Liveness check passed"
        else
          echo "‚ùå Liveness check failed"
          exit 1
        fi
        
        echo "Testing readiness endpoint..."
        if curl -f -s --max-time 30 "$SERVICE_URL/health"; then
          echo "‚úÖ Readiness check passed"
        else
          echo "‚ö†Ô∏è Readiness check failed (may be degraded mode)"
        fi
        
        echo "Testing stats API..."
        if curl -f -s --max-time 30 "$SERVICE_URL/api/stats"; then
          echo "‚úÖ Stats API working"
        else
          echo "‚ö†Ô∏è Stats API failed (may be using fallback data)"
        fi
        
        echo ""
        echo "üéâ CIPHER Platform deployment successful!"
        echo "üìä Dashboard: $SERVICE_URL/dashboard"
        echo "üè• Health: $SERVICE_URL/health"
        echo "üìà Stats: $SERVICE_URL/api/stats"
        echo ""
        echo "üîß Service Account: cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com"
        echo "üìä BigQuery Dataset: $PROJECT_ID:telegram_data"
    id: 'health-check'
    waitFor: ['deploy-cloud-run']

# Build configuration
options:
  # Use higher performance machine for faster builds
  machineType: 'E2_HIGHCPU_8'
  
  # Enable logging
  logging: CLOUD_LOGGING_ONLY
  
  # Set substitutions
  substitution_option: 'ALLOW_LOOSE'

# Timeout for the entire build (20 minutes)
timeout: '1200s'

# Images to store in Container Registry
images:
  - 'gcr.io/$PROJECT_ID/telegram-ai-processor:$BUILD_ID'
  - 'gcr.io/$PROJECT_ID/telegram-ai-processor:latest'

# Valid substitutions only (removed invalid SERVICE_URL)
substitutions:
  _SERVICE_NAME: 'telegram-ai-processor'
  _REGION: 'us-central1'
  _SERVICE_ACCOUNT: 'cloud-build-service@${PROJECT_ID}.iam.gserviceaccount.com'
