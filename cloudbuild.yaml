steps:
  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-image'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/telegram-ai-processor:$BUILD_ID',
      '-t', 'gcr.io/$PROJECT_ID/telegram-ai-processor:latest',
      '.'
    ]
    timeout: '600s'

  # Step 2: Push the Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-build-id'
    args: ['push', 'gcr.io/$PROJECT_ID/telegram-ai-processor:$BUILD_ID']
    waitFor: ['build-image']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-latest'
    args: ['push', 'gcr.io/$PROJECT_ID/telegram-ai-processor:latest']
    waitFor: ['build-image']

  # Step 3: Enable required APIs (idempotent)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'enable-apis'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Ensuring required APIs are enabled..."
        gcloud services enable \
          cloudbuild.googleapis.com \
          run.googleapis.com \
          bigquery.googleapis.com \
          secretmanager.googleapis.com \
          logging.googleapis.com \
          monitoring.googleapis.com
        echo "APIs enabled successfully"
    waitFor: ['-']

  # Step 4: Setup or verify webhook secret
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'setup-webhook-secret'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Setting up webhook secret..."
        
        # Check if webhook secret exists
        if gcloud secrets describe telegram-webhook-secret >/dev/null 2>&1; then
          echo "Webhook secret already exists, retrieving..."
          WEBHOOK_SECRET_VALUE=$$(gcloud secrets versions access latest --secret="telegram-webhook-secret")
        else
          echo "Creating new webhook secret..."
          WEBHOOK_SECRET_VALUE=$$(openssl rand -base64 32)
          echo -n "$$WEBHOOK_SECRET_VALUE" | gcloud secrets create telegram-webhook-secret --data-file=-
          
          # Grant service account access
          gcloud secrets add-iam-policy-binding telegram-webhook-secret \
            --member="serviceAccount:cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com" \
            --role="roles/secretmanager.secretAccessor"
        fi
        
        echo "$$WEBHOOK_SECRET_VALUE" > /workspace/webhook_secret.txt
        echo "Webhook secret ready"
    waitFor: ['enable-apis']

  # Step 5: Verify bot token and Gemini API key
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'verify-secrets'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Checking required secrets..."
        
        # Check bot token
        if gcloud secrets describe telegram-bot-token >/dev/null 2>&1; then
          BOT_TOKEN_VALUE=$$(gcloud secrets versions access latest --secret="telegram-bot-token" 2>/dev/null || echo "")
          
          if [ -z "$$BOT_TOKEN_VALUE" ] || [ "$$BOT_TOKEN_VALUE" = "REPLACE_WITH_YOUR_TELEGRAM_BOT_TOKEN" ]; then
            echo "⚠️  WARNING: Bot token is not set or is placeholder!"
            echo "   Please set your actual bot token:"
            echo "   echo -n 'YOUR_BOT_TOKEN' | gcloud secrets versions add telegram-bot-token --data-file=-"
            echo "placeholder" > /workspace/bot_token_status.txt
          else
            echo "Bot token is configured ✓"
            echo "configured" > /workspace/bot_token_status.txt
          fi
        else
          echo "⚠️  WARNING: Bot token secret does not exist!"
          echo "   Creating placeholder secret. Please update with your actual bot token:"
          echo "   echo -n 'YOUR_BOT_TOKEN' | gcloud secrets create telegram-bot-token --data-file=-"
          
          echo -n "REPLACE_WITH_YOUR_TELEGRAM_BOT_TOKEN" | gcloud secrets create telegram-bot-token --data-file=-
          
          # Grant service account access
          gcloud secrets add-iam-policy-binding telegram-bot-token \
            --member="serviceAccount:cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com" \
            --role="roles/secretmanager.secretAccessor"
          
          echo "placeholder" > /workspace/bot_token_status.txt
        fi
        
        # Check Gemini API key
        if gcloud secrets describe gemini-api-key >/dev/null 2>&1; then
          GEMINI_KEY_VALUE=$$(gcloud secrets versions access latest --secret="gemini-api-key" 2>/dev/null || echo "")
          
          if [ -z "$$GEMINI_KEY_VALUE" ] || [ "$$GEMINI_KEY_VALUE" = "REPLACE_WITH_YOUR_GEMINI_API_KEY" ]; then
            echo "⚠️  WARNING: Gemini API key is not set or is placeholder!"
            echo "   Please set your actual Gemini API key:"
            echo "   echo -n 'YOUR_GEMINI_API_KEY' | gcloud secrets versions add gemini-api-key --data-file=-"
            echo "placeholder" > /workspace/gemini_key_status.txt
          else
            echo "Gemini API key is configured ✓"
            echo "configured" > /workspace/gemini_key_status.txt
          fi
        else
          echo "⚠️  WARNING: Gemini API key secret does not exist!"
          echo "   Creating placeholder secret. Please update with your actual API key:"
          echo "   echo -n 'YOUR_GEMINI_API_KEY' | gcloud secrets create gemini-api-key --data-file=-"
          
          echo -n "REPLACE_WITH_YOUR_GEMINI_API_KEY" | gcloud secrets create gemini-api-key --data-file=-
          
          # Grant service account access
          gcloud secrets add-iam-policy-binding gemini-api-key \
            --member="serviceAccount:cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com" \
            --role="roles/secretmanager.secretAccessor"
          
          echo "placeholder" > /workspace/gemini_key_status.txt
        fi
    waitFor: ['setup-webhook-secret']

  # Step 6: Create BigQuery dataset (idempotent)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'setup-bigquery'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Setting up BigQuery dataset..."
        
        # Create dataset if it doesn't exist
        if ! bq show --dataset $PROJECT_ID:telegram_data >/dev/null 2>&1; then
          bq mk --location=US --description="Telegram AI Processor data" telegram_data
          echo "Created BigQuery dataset: telegram_data"
        else
          echo "BigQuery dataset already exists ✓"
        fi
    waitFor: ['verify-secrets']

  # Step 7: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-service'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Deploying to Cloud Run..."
        
        WEBHOOK_SECRET_VALUE=$$(cat /workspace/webhook_secret.txt)
        
        gcloud run deploy telegram-ai-processor \
          --image gcr.io/$PROJECT_ID/telegram-ai-processor:$BUILD_ID \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --port 8080 \
          --memory 1Gi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 10 \
          --concurrency 80 \
          --timeout 300 \
          --service-account cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com \
          --set-env-vars="GOOGLE_CLOUD_PROJECT=$PROJECT_ID" \
          --set-env-vars="PORT=8080" \
          --set-env-vars="LOG_LEVEL=INFO" \
          --set-env-vars="DATASET_ID=telegram_data" \
          --set-env-vars="TABLE_ID=processed_messages" \
          --set-env-vars="GEMINI_MODEL=gemini-1.5-flash" \
          --set-env-vars="TELEGRAM_SECRET_TOKEN=$$WEBHOOK_SECRET_VALUE" \
          --quiet
        
        echo "Cloud Run deployment completed ✓"
    waitFor: ['push-build-id', 'push-latest', 'setup-bigquery']

  # Step 8: Configure webhook URL and test service
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'configure-webhook'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Configuring webhook and testing service..."
        
        # Get the actual service URL
        SERVICE_URL=$$(gcloud run services describe telegram-ai-processor \
          --region=us-central1 \
          --format='value(status.url)')
        
        echo "Service deployed at: $$SERVICE_URL"
        
        # Update the webhook URL environment variable
        gcloud run services update telegram-ai-processor \
          --region=us-central1 \
          --set-env-vars="WEBHOOK_URL=$$SERVICE_URL" \
          --quiet
        
        # Test health endpoint
        echo "Testing service health..."
        sleep 10  # Give service time to start
        
        if curl -f "$$SERVICE_URL/health" >/dev/null 2>&1; then
          echo "Health check passed ✓"
        else
          echo "⚠️  Health check failed - service may still be starting"
        fi
        
        # Store service URL for next step
        echo "$$SERVICE_URL" > /workspace/service_url.txt
        
        echo "Service configuration completed ✓"
    waitFor: ['deploy-service']

  # Step 9: Configure Telegram webhook (if bot token is valid)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'telegram-webhook'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Configuring Telegram webhook..."
        
        SERVICE_URL=$$(cat /workspace/service_url.txt)
        WEBHOOK_SECRET_VALUE=$$(cat /workspace/webhook_secret.txt)
        BOT_TOKEN_STATUS=$$(cat /workspace/bot_token_status.txt)
        
        if [ "$$BOT_TOKEN_STATUS" = "configured" ]; then
          BOT_TOKEN_VALUE=$$(gcloud secrets versions access latest --secret="telegram-bot-token")
          
          echo "Setting webhook with Telegram API..."
          
          RESPONSE=$$(curl -s -X POST "https://api.telegram.org/bot$$BOT_TOKEN_VALUE/setWebhook" \
            -H "Content-Type: application/json" \
            -d "{
              \"url\": \"$$SERVICE_URL/webhook/telegram\",
              \"secret_token\": \"$$WEBHOOK_SECRET_VALUE\",
              \"allowed_updates\": [\"message\", \"edited_message\"],
              \"drop_pending_updates\": true,
              \"max_connections\": 40
            }")
          
          if echo "$$RESPONSE" | grep -q '"ok":true'; then
            echo "✅ Telegram webhook configured successfully!"
            echo "   Webhook URL: $$SERVICE_URL/webhook/telegram"
          else
            echo "❌ Failed to configure Telegram webhook:"
            echo "$$RESPONSE"
          fi
          
          # Get webhook info for verification
          echo ""
          echo "Webhook verification:"
          curl -s "https://api.telegram.org/bot$$BOT_TOKEN_VALUE/getWebhookInfo" | python3 -m json.tool || echo "Failed to get webhook info"
          
        else
          echo "⚠️  Skipping Telegram webhook configuration - bot token not properly set"
          echo "   To configure webhook manually after setting bot token:"
          echo "   1. Set your bot token: echo -n 'YOUR_BOT_TOKEN' | gcloud secrets versions add telegram-bot-token --data-file=-"
          echo "   2. Redeploy this service"
          echo "   3. Or manually set webhook: curl -X POST \"https://api.telegram.org/bot<YOUR_TOKEN>/setWebhook\" -d \"{\\\"url\\\": \\\"$$SERVICE_URL/webhook/telegram\\\"}\""
        fi
    waitFor: ['configure-webhook']

  # Step 10: Final status and instructions
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deployment-summary'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_URL=$$(cat /workspace/service_url.txt)
        BOT_TOKEN_STATUS=$$(cat /workspace/bot_token_status.txt)
        GEMINI_KEY_STATUS=$$(cat /workspace/gemini_key_status.txt)
        
        echo ""
        echo "🎉 DEPLOYMENT COMPLETE!"
        echo "=================================="
        echo "📍 Service URL: $$SERVICE_URL"
        echo "🔗 Dashboard: $$SERVICE_URL"
        echo "🤖 Webhook URL: $$SERVICE_URL/webhook/telegram"
        echo "🏥 Health Check: $$SERVICE_URL/health"
        echo "=================================="
        echo ""
        
        # Check configuration status
        if [ "$$BOT_TOKEN_STATUS" = "configured" ] && [ "$$GEMINI_KEY_STATUS" = "configured" ]; then
          echo "✅ All secrets configured - system fully operational!"
          echo "📨 Send a message to your bot to test the AI analysis"
        else
          echo "⚠️  Configuration needed:"
          
          if [ "$$BOT_TOKEN_STATUS" != "configured" ]; then
            echo ""
            echo "🤖 Telegram Bot Token:"
            echo "   1. Message @BotFather on Telegram"
            echo "   2. Create bot with /newbot command"
            echo "   3. Get your bot token"
            echo "   4. Run: echo -n 'YOUR_BOT_TOKEN' | gcloud secrets versions add telegram-bot-token --data-file=-"
          fi
          
          if [ "$$GEMINI_KEY_STATUS" != "configured" ]; then
            echo ""
            echo "🧠 Gemini API Key:"
            echo "   1. Visit: https://ai.google.dev/gemini-api/docs/api-key"
            echo "   2. Create a new API key"
            echo "   3. Run: echo -n 'YOUR_GEMINI_API_KEY' | gcloud secrets versions add gemini-api-key --data-file=-"
          fi
          
          echo ""
          echo "   5. Redeploy: gcloud builds submit --config cloudbuild.yaml ."
        fi
        
        echo ""
        echo "🔧 Useful commands:"
        echo "   • View logs: gcloud logs read \"resource.type=cloud_run_revision AND resource.labels.service_name=telegram-ai-processor\" --limit=20"
        echo "   • Check service: gcloud run services describe telegram-ai-processor --region=us-central1"
        echo "   • Update bot token: echo -n 'NEW_TOKEN' | gcloud secrets versions add telegram-bot-token --data-file=-"
        echo "   • Update Gemini key: echo -n 'NEW_KEY' | gcloud secrets versions add gemini-api-key --data-file=-"
        echo "   • View BigQuery data: bq query --use_legacy_sql=false 'SELECT COUNT(*) FROM \`$PROJECT_ID.telegram_data.processed_messages\`'"
        echo ""
        echo "🎯 Next steps:"
        echo "   1. Configure missing secrets (if any)"
        echo "   2. Visit the dashboard: $$SERVICE_URL"
        echo "   3. Send test messages to your bot"
        echo "   4. Monitor the logs and dashboard for AI analysis results"
        echo ""
        echo "✨ Your Telegram AI Processor with Gemini is ready!"
    waitFor: ['telegram-webhook']

# Service account configuration
serviceAccount: 'projects/$PROJECT_ID/serviceAccounts/cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  substitution_option: 'ALLOW_LOOSE'
  dynamic_substitutions: true

# Increase timeout for comprehensive deployment
timeout: '1800s'

# Build tags for organization
tags:
  - 'telegram-ai-processor'
  - 'cloud-run'
  - 'production'
  - 'gemini-api'

# Substitutions (optional overrides)
substitutions:
  _REGION: 'us-central1'
  _SERVICE_NAME: 'telegram-ai-processor'
  _DATASET_ID: 'telegram_data'
  _TABLE_ID: 'processed_messages'
