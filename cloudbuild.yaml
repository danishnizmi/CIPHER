steps:
  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-image'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/telegram-ai-processor:$BUILD_ID',
      '-t', 'gcr.io/$PROJECT_ID/telegram-ai-processor:latest',
      '.'
    ]
    timeout: '600s'

  # Step 2: Push the Docker image to Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-build-id'
    args: ['push', 'gcr.io/$PROJECT_ID/telegram-ai-processor:$BUILD_ID']
    waitFor: ['build-image']

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-latest'
    args: ['push', 'gcr.io/$PROJECT_ID/telegram-ai-processor:latest']
    waitFor: ['build-image']

  # Step 3: Enable required APIs and fix permissions
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'enable-apis'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Ensuring required APIs are enabled..."
        gcloud services enable \
          cloudbuild.googleapis.com \
          run.googleapis.com \
          bigquery.googleapis.com \
          secretmanager.googleapis.com \
          logging.googleapis.com \
          monitoring.googleapis.com
        echo "APIs enabled successfully"
        
        echo "Granting BigQuery permissions to Cloud Build service account..."
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com" \
          --role="roles/bigquery.jobUser"
        
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com" \
          --role="roles/bigquery.dataEditor"
        
        echo "BigQuery permissions granted successfully"
    waitFor: ['-']

  # Step 4: Verify existing secrets have values
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'verify-secrets'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Checking existing secrets..."
        
        # Function to check secret
        check_secret() {
          local secret_name=$1
          if gcloud secrets describe $secret_name >/dev/null 2>&1; then
            local secret_value=$(gcloud secrets versions access latest --secret="$secret_name" 2>/dev/null || echo "")
            if [ -n "$secret_value" ] && [ "$secret_value" != "REPLACE_WITH_YOUR_API_ID" ] && [ "$secret_value" != "REPLACE_WITH_YOUR_API_HASH" ] && [ "$secret_value" != "REPLACE_WITH_YOUR_PHONE" ] && [ "$secret_value" != "REPLACE_WITH_YOUR_GEMINI_API_KEY" ]; then
              echo "‚úÖ Secret $secret_name is configured with real value"
              echo "configured" > /workspace/${secret_name}_status.txt
            else
              echo "‚ö†Ô∏è  Secret $secret_name exists but may need updating"
              echo "needs_update" > /workspace/${secret_name}_status.txt
            fi
          else
            echo "‚ùå Secret $secret_name does not exist"
            echo "missing" > /workspace/${secret_name}_status.txt
          fi
        }
        
        # Check all required secrets
        check_secret "telegram-api-id"
        check_secret "telegram-api-hash"
        check_secret "telegram-phone-number"
        check_secret "gemini-api-key"
        
        echo "Secret verification completed"
    waitFor: ['enable-apis']

  # Step 5: Create BigQuery dataset (idempotent)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'setup-bigquery'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Setting up BigQuery dataset..."
        
        # Create dataset if it doesn't exist
        if ! bq show --dataset $PROJECT_ID:telegram_data >/dev/null 2>&1; then
          bq mk --location=US --description="CIPHER Cybersecurity Intelligence Platform" telegram_data
          echo "Created BigQuery dataset: telegram_data"
        else
          echo "BigQuery dataset already exists ‚úì"
        fi
    waitFor: ['verify-secrets']

  # Step 6: Deploy to Cloud Run with optimized configuration
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-service'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Deploying CIPHER to Cloud Run with production configuration..."
        
        gcloud run deploy telegram-ai-processor \
          --image gcr.io/$PROJECT_ID/telegram-ai-processor:$BUILD_ID \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --port 8080 \
          --memory 4Gi \
          --cpu 2 \
          --min-instances 0 \
          --max-instances 10 \
          --concurrency 100 \
          --timeout 3600 \
          --startup-cpu-boost \
          --service-account cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com \
          --set-env-vars="GOOGLE_CLOUD_PROJECT=$PROJECT_ID,LOG_LEVEL=INFO,DATASET_ID=telegram_data,TABLE_ID=processed_messages,PORT=8080" \
          --execution-environment gen2 \
          --no-cpu-throttling \
          --quiet
        
        echo "CIPHER deployment completed ‚úì"
    waitFor: ['push-build-id', 'push-latest', 'setup-bigquery']

  # Step 7: Wait for service to be ready and test
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'test-service'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Testing CIPHER service deployment..."
        
        # Get the actual service URL
        SERVICE_URL=$$(gcloud run services describe telegram-ai-processor \
          --region=us-central1 \
          --format='value(status.url)')
        
        echo "CIPHER service deployed at: $$SERVICE_URL"
        
        # Wait for service to be ready
        echo "Waiting for CIPHER to initialize..."
        for i in {1..30}; do
          echo "Health check attempt $$i/30..."
          
          if curl -f -s "$$SERVICE_URL/health/live" >/dev/null 2>&1; then
            echo "‚úÖ CIPHER liveness check passed"
            break
          fi
          
          if [ $$i -eq 30 ]; then
            echo "‚ö†Ô∏è  Service not responding to liveness checks but continuing..."
            break
          fi
          
          sleep 10
        done
        
        # Test startup probe
        echo "Testing CIPHER startup status..."
        if curl -f -s "$$SERVICE_URL/health/startup" >/dev/null 2>&1; then
          echo "‚úÖ CIPHER startup probe responding"
        else
          echo "‚ö†Ô∏è  Startup probe not responding yet"
        fi
        
        # Store service URL for summary
        echo "$$SERVICE_URL" > /workspace/service_url.txt
        
        echo "CIPHER testing completed ‚úì"
    waitFor: ['deploy-service']

  # Step 8: Final status and instructions
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deployment-summary'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_URL=$$(cat /workspace/service_url.txt)
        
        # Check secret status
        TELEGRAM_API_ID_STATUS=$$(cat /workspace/telegram-api-id_status.txt 2>/dev/null || echo "unknown")
        TELEGRAM_API_HASH_STATUS=$$(cat /workspace/telegram-api-hash_status.txt 2>/dev/null || echo "unknown")
        TELEGRAM_PHONE_STATUS=$$(cat /workspace/telegram-phone-number_status.txt 2>/dev/null || echo "unknown")
        GEMINI_KEY_STATUS=$$(cat /workspace/gemini-api-key_status.txt 2>/dev/null || echo "unknown")
        
        echo ""
        echo "üéâ CIPHER DEPLOYMENT COMPLETE!"
        echo "========================================"
        echo "üõ°Ô∏è  CIPHER Intelligence Platform"
        echo "üìç Service URL: $$SERVICE_URL"
        echo "üîó Dashboard: $$SERVICE_URL"
        echo "üìä System Status: $$SERVICE_URL/status"
        echo "üè• Health Check: $$SERVICE_URL/health"
        echo "========================================"
        echo ""
        
        # Check configuration status
        READY=true
        CONFIGURED_COUNT=0
        
        echo "üìã CONFIGURATION STATUS:"
        echo "========================"
        
        if [ "$$TELEGRAM_API_ID_STATUS" = "configured" ]; then
          echo "‚úÖ Telegram API ID configured"
          CONFIGURED_COUNT=$$((CONFIGURED_COUNT + 1))
        else
          echo "‚ö†Ô∏è  Telegram API ID status: $$TELEGRAM_API_ID_STATUS"
          READY=false
        fi
        
        if [ "$$TELEGRAM_API_HASH_STATUS" = "configured" ]; then
          echo "‚úÖ Telegram API Hash configured"
          CONFIGURED_COUNT=$$((CONFIGURED_COUNT + 1))
        else
          echo "‚ö†Ô∏è  Telegram API Hash status: $$TELEGRAM_API_HASH_STATUS"
          READY=false
        fi
        
        if [ "$$TELEGRAM_PHONE_STATUS" = "configured" ]; then
          echo "‚úÖ Phone number configured"
          CONFIGURED_COUNT=$$((CONFIGURED_COUNT + 1))
        else
          echo "‚ö†Ô∏è  Phone number status: $$TELEGRAM_PHONE_STATUS"
          READY=false
        fi
        
        if [ "$$GEMINI_KEY_STATUS" = "configured" ]; then
          echo "‚úÖ Gemini AI configured"
          CONFIGURED_COUNT=$$((CONFIGURED_COUNT + 1))
        else
          echo "‚ö†Ô∏è  Gemini API key status: $$GEMINI_KEY_STATUS"
          READY=false
        fi
        
        echo ""
        echo "Configuration: $$CONFIGURED_COUNT/4 secrets properly configured"
        
        if [ "$$READY" = "true" ]; then
          echo ""
          echo "üéØ CIPHER SYSTEM OPERATIONAL!"
          echo "All secrets configured. Cybersecurity monitoring active."
          echo "üîç Monitored Sources:"
          echo "   ‚Ä¢ @DarkfeedNews - Threat Intelligence"
          echo "   ‚Ä¢ @breachdetector - Data Breach Monitor"
          echo "   ‚Ä¢ @secharvester - Security News"
          echo ""
          echo "üöÄ Access your CIPHER dashboard: $$SERVICE_URL"
        else
          echo ""
          echo "üîß CONFIGURATION ISSUES DETECTED"
          echo "Some secrets need attention. Service will start but monitoring may be limited."
          echo "Check logs and secret values."
        fi
        
        echo ""
        echo "üîß Useful Commands:"
        echo "   ‚Ä¢ View logs: gcloud logs read \"resource.type=cloud_run_revision AND resource.labels.service_name=telegram-ai-processor\" --limit=20"
        echo "   ‚Ä¢ Service status: gcloud run services describe telegram-ai-processor --region=us-central1"
        echo "   ‚Ä¢ Check system: curl $$SERVICE_URL/status"
        echo ""
        echo "‚ú® CIPHER Cybersecurity Intelligence Platform is ready!"
    waitFor: ['test-service']

# Service account configuration
serviceAccount: 'projects/$PROJECT_ID/serviceAccounts/cloud-build-service@$PROJECT_ID.iam.gserviceaccount.com'

# Build options for production
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  substitution_option: 'ALLOW_LOOSE'
  dynamic_substitutions: true

# Extended timeout for production deployment
timeout: '2400s'

# Build tags
tags:
  - 'cipher-intelligence-platform'
  - 'cybersecurity-monitoring'
  - 'production'

# Substitutions
substitutions:
  _REGION: 'us-central1'
  _SERVICE_NAME: 'telegram-ai-processor'
  _DATASET_ID: 'telegram_data'
  _TABLE_ID: 'processed_messages'
